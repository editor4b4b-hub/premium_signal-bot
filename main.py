import os
import logging
import random
import requests
from openai import OpenAI
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes

# ‚úÖ Secrets ‡¶•‡ßá‡¶ï‡ßá Key ‡¶™‡ßú‡¶æ
OPENAI_API_KEY = os.getenv("Premium_Signal")
BOT_TOKEN = os.getenv("BOT_TOKEN")

client = OpenAI(api_key=OPENAI_API_KEY)

# ‡¶≤‡¶ó‡¶ø‡¶Ç ‡¶∏‡ßá‡¶ü‡¶Ü‡¶™
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# ‡¶ó‡ßç‡¶≤‡ßã‡¶¨‡¶æ‡¶≤ ‡¶π‡¶ø‡¶∏‡ßç‡¶ü‡ßã‡¶∞‡¶ø
stats = {
    "big_small": {"win": 0, "loss": 0},
    "color": {"win": 0, "loss": 0},
    "number": {"win": 0, "loss": 0},
    "round": 1
}

# üî• ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶•‡ßá‡¶ï‡ßá ‡¶ï‡¶æ‡¶≤‡¶æ‡¶∞ ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶æ
def get_color(number):
    if number in [1, 3, 5, 7, 9]:
        return "üü¢ GREEN"
    elif number in [2, 4, 6, 8]:
        return "üî¥ RED"
    elif number == 0:
        return "üî¥ RED & üü£ VIOLET"
    elif number == 5:
        return "üü¢ GREEN & üü£ VIOLET"

# üî• Big/Small ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶æ
def get_big_small(number):
    return "BIG" if number >= 5 else "SMALL"

# üî• ‡¶≤‡¶æ‡¶á‡¶≠ ‡¶π‡¶ø‡¶∏‡ßç‡¶ü‡ßã‡¶∞‡¶ø ‡¶Ü‡¶®‡¶æ (API ‡¶•‡ßá‡¶ï‡ßá)
def fetch_live_history():
    try:
        # üü¢ ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶Ü‡¶∏‡¶≤ API URL ‡¶¨‡¶∏‡¶æ‡¶¨‡ßá
        url = "https://example.com/api/live-results"  
        response = requests.get(url, timeout=5)
        if response.status_code == 200:
            data = response.json()
            # ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶ß‡¶∞‡ßá ‡¶®‡¶ø‡¶≤‡¶æ‡¶Æ data = [{"round":1,"number":3,"color":"GREEN"}]
            last_5 = data[-5:]  # ‡¶∂‡ßá‡¶∑ ‡ß´‡¶ü‡¶æ ‡¶∞‡¶æ‡¶â‡¶®‡ßç‡¶° ‡¶¶‡ßá‡¶ñ‡¶æ‡¶¨‡ßá
            history_text = "\n".join(
                [f"Round {item['round']} ‚Üí {item['color']} ({item['number']})" for item in last_5]
            )
            return history_text
        else:
            return "‚ö†Ô∏è API ‡¶•‡ßá‡¶ï‡ßá ‡¶°‡¶æ‡¶ü‡¶æ ‡¶Ü‡¶®‡¶æ ‡¶ó‡ßá‡¶≤‡ßã ‡¶®‡¶æ!"
    except Exception as e:
        return f"‚ö†Ô∏è ‡¶≤‡¶æ‡¶á‡¶≠ ‡¶°‡ßá‡¶ü‡¶æ ‡¶è‡¶∞‡¶∞: {e}"

# /start ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚úÖ Bot is running!")

# /signal ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°
async def signal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    number = random.randint(0, 9)
    color = get_color(number)
    big_small = get_big_small(number)

    # ‡¶∞‚Äç‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶Æ Win/Loss
    win_or_loss = random.choice(["‚úÖ Win", "‚ùå Loss"])

    # ‡¶π‡¶ø‡¶∏‡ßç‡¶ü‡ßã‡¶∞‡¶ø ‡¶Ü‡¶™‡¶°‡ßá‡¶ü
    if win_or_loss == "‚úÖ Win":
        stats["big_small"]["win"] += 1
        stats["color"]["win"] += 1
        stats["number"]["win"] += 1
    else:
        stats["big_small"]["loss"] += 1
        stats["color"]["loss"] += 1
        stats["number"]["loss"] += 1

    live_history = fetch_live_history()

    text = f"""
üì¢ **Round {stats['round']}**

üì° **Signal:** {big_small}
üé® **Color:** {color}
üî¢ **Number:** {number}

üìä **Result:** {win_or_loss}

üìà **Win & Loss History**
BIG/SMALL ‚Üí ‚úÖ {stats['big_small']['win']} | ‚ùå {stats['big_small']['loss']}
COLOR ‚Üí ‚úÖ {stats['color']['win']} | ‚ùå {stats['color']['loss']}
NUMBER ‚Üí ‚úÖ {stats['number']['win']} | ‚ùå {stats['number']['loss']}

üì° **Live History**
{live_history}
"""
    stats["round"] += 1
    await update.message.reply_text(text, parse_mode="Markdown")

# ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞ (ChatGPT Reply)
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text
    try:
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[{"role": "user", "content": user_message}]
        )
        reply = response.choices[0].message.content
        await update.message.reply_text(reply)
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶≠‡ßÅ‡¶≤ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá: {e}")

# ‡¶Æ‡ßá‡¶á‡¶® ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("signal", signal))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    app.run_polling()

if __name__ == '__main__':
    main()
